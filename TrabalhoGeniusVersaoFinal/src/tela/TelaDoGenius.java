package tela;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;

import classesAuxiliares.Jogadores;
import classesAuxiliares.NumeraCor;
import classesPrincipais.ControlaOsBotoes;
import classesPrincipais.ControlaAspectosGerais;

import javax.swing.SwingConstants;
import javax.swing.Timer;

public class TelaDoGenius extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;

	ControlaAspectosGerais genius;
	// Instancia jogadores usando o tipo da classe "jogador" e exibe caixa de texto
	// solicitando os respectivos nomes
	Jogadores jogador1 = new Jogadores(1, -1, true, JOptionPane.showInputDialog("Digite o nome do jogador 1", ""));
	Jogadores jogador2 = new Jogadores(2, -1, false, JOptionPane.showInputDialog("Digite o nome do jogador 2", ""));
	int velocidade = 1; // velocidade padrão do jogo = 1 (pode ir até 3)
	ArrayList<NumeraCor> listaCor;
	ControlaOsBotoes botao;
	private int tempo;
	private Timer tempo5Segundos;
	private boolean flag;
	private boolean fimJogo = false;
	private boolean empate = false;

	private javax.swing.JButton jButton1;
	private javax.swing.JButton btnAmarelo;
	private javax.swing.JButton btnAzul;
	private javax.swing.JButton btnIniciar;
	private javax.swing.JButton btnVerde;
	private javax.swing.JButton btnVermelho;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLayeredPane jLayeredPane1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JToggleButton jToggleButton1;
	private JPanel pnlJogadores;
	private JLabel lblJogador1;
	private JLabel lblJogador2;
	private JTextField txtPontos1;
	private JTextField txtPontos2;
	private JPanel pnlVelocidade;
	private JButton btnVelMenos;
	private JButton btnVelMais;
	private JLabel lblSetVelocidade;

	// inicializando as variáveis da classe
	public TelaDoGenius() {
		genius = new ControlaAspectosGerais();
		tempo = 1000;
		flag = false;
		listaCor = new ArrayList<>();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	private void initComponents() {

		// Instanciando e inicializando botões e paineis utilizados no Jframe

		jToggleButton1 = new javax.swing.JToggleButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jLayeredPane1 = new javax.swing.JLayeredPane();
		jButton1 = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		btnVermelho = new javax.swing.JButton();
		btnVerde = new javax.swing.JButton();
		btnAmarelo = new javax.swing.JButton();
		btnAzul = new javax.swing.JButton();
		btnIniciar = new javax.swing.JButton();

		jToggleButton1.setText("jToggleButton1");

		jTable1.setModel(
				new javax.swing.table.DefaultTableModel(
						new Object[][] { { null, null, null, null }, { null, null, null, null },
								{ null, null, null, null }, { null, null, null, null } },
						new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
		jScrollPane1.setViewportView(jTable1);

		javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
		jLayeredPane1.setLayout(jLayeredPane1Layout);
		jLayeredPane1Layout.setHorizontalGroup(jLayeredPane1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100, Short.MAX_VALUE));
		jLayeredPane1Layout.setVerticalGroup(jLayeredPane1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100, Short.MAX_VALUE));

		jButton1.setText("jButton1");

		jLabel3.setFont(new java.awt.Font("Verdana", 1, 24));
		jLabel3.setForeground(new java.awt.Color(255, 255, 255));
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel3.setText("GENIUS");

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("GENIUS");
		setFocusable(false);
		setResizable(false);

		jPanel1.setBackground(new Color(230, 230, 250));

		btnVermelho.setBackground(new java.awt.Color(125, 0, 0));
		btnVermelho.setEnabled(false);
		btnVermelho.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonVermelhoActionPerformed(evt);
			}
		});

		btnVerde.setBackground(new java.awt.Color(0, 125, 0));
		btnVerde.setEnabled(false);
		btnVerde.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonVerdeActionPerformed(evt);
			}
		});

		btnAmarelo.setBackground(new java.awt.Color(150, 150, 0));
		btnAmarelo.setEnabled(false);
		btnAmarelo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAmareloActionPerformed(evt);
			}
		});

		btnAzul.setBackground(new java.awt.Color(0, 0, 125));
		btnAzul.setEnabled(false);
		btnAzul.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAzulActionPerformed(evt);
			}
		});

		btnIniciar.setBackground(new java.awt.Color(255, 255, 255));
		btnIniciar.setFont(new Font("Times New Roman", Font.PLAIN, 18));
		btnIniciar.setForeground(new Color(255, 0, 0));
		btnIniciar.setText("INICIAR");
		btnIniciar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 10, true));
		btnIniciar.setBorderPainted(false);
		btnIniciar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonIniciarActionPerformed(evt);
				fimJogo = false;
			}
		});

		pnlJogadores = new JPanel();
		pnlJogadores.setBackground(new Color(192, 192, 192));

		pnlVelocidade = new JPanel();
		pnlVelocidade.setBackground(new Color(192, 192, 192));
		pnlVelocidade.setForeground(Color.WHITE);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1Layout.setHorizontalGroup(
			jPanel1Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(jPanel1Layout.createSequentialGroup()
							.addComponent(pnlJogadores, GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
							.addPreferredGap(ComponentPlacement.RELATED))
						.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
							.addComponent(btnVermelho, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(btnAzul, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)))
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
							.addGap(18)
							.addComponent(pnlVelocidade, GroupLayout.PREFERRED_SIZE, 206, GroupLayout.PREFERRED_SIZE)
							.addGap(10)
							.addComponent(btnIniciar, GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
						.addGroup(jPanel1Layout.createSequentialGroup()
							.addGap(14)
							.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(btnAmarelo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(btnVerde, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))))
					.addContainerGap())
		);
		jPanel1Layout.setVerticalGroup(
			jPanel1Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
						.addComponent(btnIniciar, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
						.addComponent(pnlJogadores, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
						.addComponent(pnlVelocidade, 0, 0, Short.MAX_VALUE))
					.addGap(23)
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
						.addComponent(btnAzul, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
						.addComponent(btnVerde, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(btnVermelho, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
						.addComponent(btnAmarelo, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
					.addGap(32))
		);

		JLabel lblVelocidade = new JLabel("Velocidade");
		lblVelocidade.setHorizontalAlignment(SwingConstants.CENTER);

		// action do botão - da velocidade, se for maior que 1, a velocidade diminui
		// caso o botão seja apertado
		btnVelMenos = new JButton("-");
		btnVelMenos.setFont(new Font("Dialog", Font.BOLD, 16));
		btnVelMenos.setForeground(new Color(255, 0, 0));
		btnVelMenos.setBackground(Color.BLUE);
		btnVelMenos.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (velocidade > 1) {
					velocidade--;
					lblSetVelocidade.setText(String.valueOf(velocidade));
				}
			}
		});

		// action do botão + da velocidade, se for menor do que 3, a velocidade aumenta
		// caso o botão seja apertado
		btnVelMais = new JButton("+");
		btnVelMais.setFont(new Font("Dialog", Font.BOLD, 16));
		btnVelMais.setForeground(new Color(255, 0, 0));
		btnVelMais.setBackground(Color.BLUE);
		btnVelMais.setMinimumSize(new Dimension(39, 25));
		btnVelMais.setPreferredSize(new Dimension(39, 25));
		btnVelMais.setMaximumSize(new Dimension(39, 25));
		btnVelMais.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (velocidade < 3) {
					velocidade++;
					lblSetVelocidade.setText(String.valueOf(velocidade));
				}
			}
		});

		lblSetVelocidade = new JLabel("1");
		GroupLayout gl_pnlVelocidade = new GroupLayout(pnlVelocidade);
		gl_pnlVelocidade.setHorizontalGroup(gl_pnlVelocidade.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_pnlVelocidade.createSequentialGroup().addGap(39)
						.addComponent(btnVelMenos, GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE).addGap(18)
						.addComponent(btnVelMais, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
						.addGap(32))
				.addGroup(gl_pnlVelocidade.createSequentialGroup().addGap(23)
						.addComponent(lblVelocidade, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(lblSetVelocidade)
						.addContainerGap(45, Short.MAX_VALUE)));
		gl_pnlVelocidade
				.setVerticalGroup(
						gl_pnlVelocidade.createParallelGroup(Alignment.LEADING)
								.addGroup(
										gl_pnlVelocidade.createSequentialGroup().addContainerGap()
												.addGroup(gl_pnlVelocidade.createParallelGroup(Alignment.BASELINE)
														.addComponent(lblVelocidade).addComponent(lblSetVelocidade))
												.addGap(18)
												.addGroup(gl_pnlVelocidade.createParallelGroup(Alignment.TRAILING)
														.addComponent(btnVelMais, GroupLayout.DEFAULT_SIZE, 29,
																Short.MAX_VALUE)
														.addComponent(btnVelMenos, GroupLayout.DEFAULT_SIZE,
																GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addGap(36)));
		pnlVelocidade.setLayout(gl_pnlVelocidade);

		lblJogador1 = new JLabel(jogador1.getNome());
		lblJogador1.setForeground(new Color(255, 255, 255));

		lblJogador2 = new JLabel(jogador2.getNome());
		lblJogador2.setForeground(new Color(255, 255, 255));

		// inicia em 0 pontos para o jogador 1
		txtPontos1 = new JTextField();
		txtPontos1.setText("0 pontos");
		txtPontos1.setEditable(false);
		txtPontos1.setColumns(10);

		// inicia em 0 pontos para o jogador 2
		txtPontos2 = new JTextField();
		txtPontos2.setText("0 pontos");
		txtPontos2.setEditable(false);
		txtPontos2.setColumns(10);
		GroupLayout gl_pnlJogadores = new GroupLayout(pnlJogadores);
		gl_pnlJogadores.setHorizontalGroup(
			gl_pnlJogadores.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_pnlJogadores.createSequentialGroup()
					.addGap(88)
					.addGroup(gl_pnlJogadores.createParallelGroup(Alignment.LEADING)
						.addComponent(lblJogador1, GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
						.addComponent(lblJogador2, GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_pnlJogadores.createParallelGroup(Alignment.LEADING)
						.addComponent(txtPontos2, 0, 0, Short.MAX_VALUE)
						.addComponent(txtPontos1, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 104, GroupLayout.PREFERRED_SIZE))
					.addGap(60))
		);
		gl_pnlJogadores.setVerticalGroup(
			gl_pnlJogadores.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_pnlJogadores.createSequentialGroup()
					.addGroup(gl_pnlJogadores.createParallelGroup(Alignment.LEADING, false)
						.addGroup(gl_pnlJogadores.createSequentialGroup()
							.addContainerGap()
							.addComponent(txtPontos1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addComponent(txtPontos2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_pnlJogadores.createSequentialGroup()
							.addGap(16)
							.addComponent(lblJogador1, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addComponent(lblJogador2, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)))
					.addGap(10))
		);
		pnlJogadores.setLayout(gl_pnlJogadores);
		jPanel1.setLayout(jPanel1Layout);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(Alignment.LEADING, layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
					.addContainerGap())
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(Alignment.LEADING, layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		getContentPane().setLayout(layout);

		pack();
	}

	private void exibirSequencia() {

		tempo = retornarTempoVelocidade(1000); // a sequencia inicia com a velocidade de 1000ms e vai aumentando
												// conforme as rodadas passam

		for (int i = 0; i < genius.getRodada(); i++) { // recebe a rodada do momento e exibe as cores de forma randomica
			switch (listaCor.get(i)) {
			case VERDE:
				botao = new ControlaOsBotoes(btnVerde, NumeraCor.VERDE, tempo);
				break;
			case VERMELHO:
				botao = new ControlaOsBotoes(btnVermelho, NumeraCor.VERMELHO, tempo);
				break;
			case AZUL:
				botao = new ControlaOsBotoes(btnAzul, NumeraCor.AZUL, tempo);
				break;
			case AMARELO:
				botao = new ControlaOsBotoes(btnAmarelo, NumeraCor.AMARELO, tempo);
				break;
			}
			botao.piscarBotao(retornarTempoVelocidade(1000)); // o metodo retornartempo, ele passa a velocidade
																// respectiva do dos botoes de velocidade
			tempo += retornarTempoVelocidade(2000);
		}
		habilitarBotoes(); // os botoes são habilitados caso o jogo se inicie, e são desabilitados caso
							// passe 5 segundos sem jogar.
		if (genius.getRodada() > 1 || flag) {
			tempo5Segundos.stop();
		}
		flag = true;
		cincoSegundos(tempo);
	}

	private int retornarTempoVelocidade(int tempo) { // recebe o tempo padrão no parametro e testa quais velocidades os
														// jogadores escolheram
		if (velocidade == 2) { // naquele momento, caso seja velocidade 2, o metodo executará o calculo para
								// aumentar a velocidade
			tempo = (int) Math.round(tempo * 0.75);// recebe o tempo da respectiva rodada e multiplica por 0.75 , é
													// arredondado o inteiro
		} else if (velocidade == 3) { // usando o metodo Math.round
			tempo = (int) Math.round(tempo * 0.35); // faz o mesmo que o anterior, porém, o jogo ficará mais rápido
		}
		return tempo;
	}

	private void habilitarBotoes() {
		Timer tempo2 = new Timer(0, (ActionEvent e2) -> {
			btnAmarelo.setEnabled(false);
			btnAzul.setEnabled(false);
			btnVerde.setEnabled(false);
			btnVermelho.setEnabled(false);
			btnIniciar.setEnabled(false);
			btnIniciar.setText("EXIBINDO...");
			Timer tempo3 = new Timer(tempo, (ActionEvent e) -> {
				btnAmarelo.setEnabled(true);
				btnAzul.setEnabled(true);
				btnVerde.setEnabled(true);
				btnVermelho.setEnabled(true);
				btnIniciar.setEnabled(true);
				btnIniciar.setText("REINICIAR");
			});
			tempo3.setRepeats(false);
			tempo3.start();

		}); // Habilita ou desabilita os botões, conforme o estado atual do jogo
		tempo2.setRepeats(false);
		tempo2.start();
	}

	private void desabilitarBotoes() {
		btnAmarelo.setEnabled(false);
		btnAzul.setEnabled(false);
		btnVerde.setEnabled(false);
		btnVermelho.setEnabled(false);
		if (fimJogo) {
			btnIniciar.setText("INICIAR");
			fimJogo = false;
		} else if (empate) {
			btnIniciar.setText("DESEMPATAR");
			zerarPontuacao();
			empate = false;
		} else {
			btnIniciar.setText("PRÃXIMO JOGADOR");
		}
	}

	private void cincoSegundos(int tempo) { // verificador do tempo limite para jogar
		tempo5Segundos = new Timer(tempo + 5000, (ActionEvent e) -> { // 5000ms = 5s
			genius.msgTempoExpeirado();
			genius.recomecarRodada();
			desabilitarBotoes();
		});
		tempo5Segundos.setRepeats(false);
		tempo5Segundos.start();
	}

	private void verificarRodada() {
		if (jogador1.jaJogou() && jogador2.jaJogou()) {
			if (jogador1.isVez()) {
				jogador1.setPontos(genius.getIndex());
			} else {
				jogador2.setPontos(genius.getIndex()); // vai verificando as possibilidades de vitória, derrota e
														// empate, conforme cada
			} // rodada vai sendo passada.
			if (jogador1.getPontos() > jogador2.getPontos()) {
				genius.msgJogadorParabens(jogador1.getNome());
			} else if (jogador2.getPontos() > jogador1.getPontos()) {
				genius.msgJogadorParabens(jogador2.getNome());
			} else {
				genius.msgEmpate();
			}
		} else {
			if (jogador1.isVez()) {
			}
			// inicia rodada
		}
		if (genius.getIndex() == genius.getRodada() - 1) {
			if (genius.getIndex() == 20 || 21 == genius.getRodada()) {
				genius.msgParabens();
				tempo5Segundos.stop();
				fimJogo = true;
				genius.recomecarRodada();
				desabilitarBotoes();
			} else {
				genius.zerarIndex();
				genius.setRodada();
				exibirSequencia();
			}
		} else {
			genius.setIndex();
		}
	}

	private void voltarVelocidade() { // seta velocidade para o padrão
		lblSetVelocidade.setText("1");
		velocidade = 1;
	}

	private void zerarPontuacao() { // zera a pontuação de ambos os jogadores
		txtPontos1.setText("0 pontos");
		txtPontos2.setText("0 pontos");
		jogador1.setPontos(-1);
		jogador2.setPontos(-1);
		jogador1.setVez(true);
		jogador2.setVez(false);
	}

	private void mudarJogador() { // passa a vez pro proximo jogador, habilitando e desabilitando respectivos
									// botoes
		if (jogador1.isVez()) {
			jogador1.setVez(false);
			jogador2.setVez(true);
			
		} else {
			jogador1.setVez(true);
			jogador2.setVez(false);
		}
	}

	private void setPontuacaoJogador() { // põe a pontuação do jogador na caixa de texto dele

		if (jogador1.isVez()) {
			jogador1.setPontos(genius.getIndex());
			txtPontos1.setText(String.valueOf(genius.getIndex() + " pontos"));
		} else {
			jogador2.setPontos(genius.getIndex());
			txtPontos2.setText(String.valueOf(genius.getIndex() + " pontos"));
		}
	}

	private Jogadores jogadorVencedor() { // diz quem venceu

		if (jogador1.getPontos() > jogador2.getPontos())
			return jogador1;
		else if (jogador2.getPontos() > jogador1.getPontos())
			return jogador2;
		else
			return null;
	}

	private void verificarJogo() { // faz uma verificação do estado final do jogo, se for o fim do jogo, diz quem é
									// o vencedor, se tiver vencedor
		if (avaliaFimJogo()) { // ele ativa o fim do jogo, zera as pontuações e retorna a velocidade padrão que
								// é 1.
			genius.msgJogadorParabens(jogadorVencedor().getNome());
			genius.msgPlacar(jogador1, jogador2);
			zerarPontuacao();
			voltarVelocidade();
			fimJogo = true;
		} else if (isEmpate()) { // mostra o caso do empate.
			genius.msgEmpate();
			zerarPontuacao();
			voltarVelocidade();
			empate = true;
		}

	}

	private boolean isEmpate() { // calcula se deu empate ou não
		if (jogador1.jaJogou() && jogador2.jaJogou()) {
			if (jogador1.getPontos() == jogador2.getPontos()) {
				return true;
			}
		}
		return false;
	}

	private boolean jogoComecou() { // verifica se o jogo foi iniciado ou não. Quando ele não está iniciado, as
									// variáveis de pontuação
									// são iniciadas com -1
		if (jogador1.getPontos() == -1 && jogador2.getPontos() == -1) {
			return false;
		}
		return true;
	}

	private void jButtonIniciarActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButtonIniciarActionPerformed
		if (!jogoComecou()) {
			zerarPontuacao();
		} else {
			mudarJogador();
		}
		listaCor.clear(); // action do botão de iniciar, chamando os metodos necessários
		listaCor = genius.gerarListaCor();
		genius.recomecarRodada();
		genius.zerarIndex();
		if (genius.getRodada() > 1 || flag) {
			tempo5Segundos.stop();
		}
		exibirSequencia();
	}// GEN-LAST:event_jButtonIniciarActionPerformed

	private boolean avaliaFimJogo() { // verifica se o jogo acabou.
		if (jogador1.getPontos() == -1 || jogador2.getPontos() == -1) {
			return false;
		} else {
			if (jogador1.getPontos() != jogador2.getPontos()) // se as pontuações forem diferentes, o jogo acabou
				return true;
			else
				return false; // caso de empate
		}
	}

	// OS PROXIMO 4 ACTION PERFORMED, SÃO PARA VERIFICAR SE O CLICK NA RESPECTIVA
	// COR FOI CORRETO OU NÃO, TODOS POSSUEM OS MESMOS PADRÕES.

	private void jButtonAzulActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButtonAzulActionPerformed
		tempo5Segundos.stop();
		cincoSegundos(2000);
		tempo5Segundos.start();
		if (genius.verificarCor(NumeraCor.AZUL)) {
			verificarRodada();
		} else {
			tempo5Segundos.stop();
			setPontuacaoJogador();
			genius.msgPressionarBotaoErrado();
			genius.recomecarRodada();
			verificarJogo();
			desabilitarBotoes();
		}
	}// GEN-LAST:event_jButtonAzulActionPerformed

	private void jButtonVerdeActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButtonVerdeActionPerformed
		tempo5Segundos.stop();
		cincoSegundos(2000);
		tempo5Segundos.start();
		if (genius.verificarCor(NumeraCor.VERDE)) {
			verificarRodada();
		} else {
			tempo5Segundos.stop();
			setPontuacaoJogador();
			genius.msgPressionarBotaoErrado();
			verificarJogo();
			genius.recomecarRodada();
			verificarJogo();
			desabilitarBotoes();
		}
	}// GEN-LAST:event_jButtonVerdeActionPerformed

	private void jButtonVermelhoActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButtonVermelhoActionPerformed
		tempo5Segundos.stop();
		cincoSegundos(2000);
		tempo5Segundos.start();
		if (genius.verificarCor(NumeraCor.VERMELHO)) {
			verificarRodada();
		} else {
			tempo5Segundos.stop();
			setPontuacaoJogador();
			genius.msgPressionarBotaoErrado();
			genius.recomecarRodada();
			verificarJogo();
			desabilitarBotoes();
		}
	}// GEN-LAST:event_jButtonVermelhoActionPerformed

	private void jButtonAmareloActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButtonAmareloActionPerformed
		tempo5Segundos.stop();
		cincoSegundos(2000);
		tempo5Segundos.start();
		if (genius.verificarCor(NumeraCor.AMARELO)) {
			verificarRodada();
		} else {
			tempo5Segundos.stop();
			setPontuacaoJogador();
			genius.msgPressionarBotaoErrado();
			genius.recomecarRodada();
			verificarJogo();
			desabilitarBotoes();
		}
	}// GEN-LAST:event_jButtonAmareloActionPerformed

}
